package Leonara

import Hero
import Leonara_Data
import LinkedList
import PactOfWrath

public class Leonara extends PlayerHero
	construct(player owner, vec2 pos, angle facing)
		super(owner, HERO_ID_LEONARA, pos, facing)

		print("Leonara was picked by " + GetPlayerName(owner))
		
		//Add abilities to leonara
		UnitAddAbility(this.getHero(), LEONARA_SPELL_ID_P_PSEUDO)
		UnitAddAbility(this.getHero(), LEONARA_SPELL_ID_Q)
		UnitAddAbility(this.getHero(), LEONARA_SPELL_ID_W)
		UnitAddAbility(this.getHero(), LEONARA_SPELL_ID_E)
		UnitAddAbility(this.getHero(), LEONARA_SPELL_ID_R)

		//Set ability IDs to the PlayerHero for later interaction etc. (e.g.: steal enemies Q ability)
		HERO_SPELL_P=LEONARA_SPELL_ID_P_PSEUDO
		HERO_SPELL_Q=LEONARA_SPELL_ID_Q
		HERO_SPELL_W=LEONARA_SPELL_ID_W
		HERO_SPELL_E=LEONARA_SPELL_ID_E
		HERO_SPELL_R=LEONARA_SPELL_ID_R
		PLAYER_HEROES.add(this)


//Returns all PlayerHeroes that a Leonaras LUL
public function getPlayerHeroesOfTypeLeonara() returns LinkedList<PlayerHero>
	LinkedList<PlayerHero> ph=PLAYER_HEROES.copy()
	LLIterator<PlayerHero> i=ph.iterator()	
	PlayerHero check
	while i.hasNext()
		check=i.next()
		if not(check instanceof Leonara)
			ph.remove(check)
	i.close()
	return ph

//Checks the damaged unit of DamageType2 if the effect of pact of wrath is viable and if so, gains one stack of Pact of Wrath
public function checkPactOfWrathChance(unit u)
	LinkedList<PlayerHero> ph=getPlayerHeroesOfTypeLeonara()
	LLIterator<PlayerHero> i=ph.iterator()
	PlayerHero do
	while i.hasNext()
		do=i.next()
		if u==do.getHero()
			if GetRandomInt(0, 100)<=PACTOFWRATH_CHANCE_SELF
				getPactOfWrathStack(do.getHero())
				break
		else if IsUnitInRange(u, do.getHero(), PACTOFWRATH_RADIUS) and GetRandomInt(0, 100)<=PACTOFWRATH_CHANCE_OTHERS
			getPactOfWrathStack(do.getHero())
			break
	destroy ph
	i.close()



		