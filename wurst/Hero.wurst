package Hero

class PlayerHero
	// Unit
	unit hero

	// Abilities
	// We could create an ability class where we can manage the cooldowns instead of here
	HeroAbility P
	HeroAbility Q
	HeroAbility W
	HeroAbility E
	HeroAbility R

	// Stats
	real hitPoints 					// hit point maximum
	real hitPointsReg 				// hit point regeneration per second
	real mana 						// mana maximum
	real manaReg 					// mana regeneration per second
	real critChance 				// chance to crit
	real critDamage 				// increased crit damage, standard is 200%
	int armor 						// hero armor
	int damage 						// flat hero damage
	real tenacity 					// Status resistance
	real blessing 					// buff duration multiplier
	real cooldownReductionPercent 	// global % CDR
	real cooldownReductionFlat 		// global flat CDR
	real movementspeedBonus 	 	// in %

	// something missing?

	// ------------------------ //

	construct(unit h, HeroAbility q, HeroAbility w, HeroAbility e, HeroAbility r, HeroAbility p)
		this.hero=h
		this.P=p
		this.Q=q
		this.W=w
		this.E=e
		this.R=r

	function getHero() returns unit
		return this.hero
	
	// Reduces the cooldown of each ability based on a flat amount
	function reduceGlobalCooldown(real amount)
		Q.reduceCooldown(amount)
		W.reduceCooldown(amount)
		E.reduceCooldown(amount)
		R.reduceCooldown(amount)

	// Reduces the cooldown of each ability based on the maximum cooldown and a given percentage
	function reduceGlobalCooldownPercentMax(real percentage)
		real amount
		amount=Q.getCooldownMax()*percentage
		Q.reduceCooldown(amount)
		amount=W.getCooldownMax()*percentage
		W.reduceCooldown(amount)
		amount=E.getCooldownMax()*percentage
		E.reduceCooldown(amount)
		amount=R.getCooldownMax()*percentage
		R.reduceCooldown(amount)

	// Reduces the cooldown of each ability based on the remaining cooldown and a given percentage
	function reduceGlobalCooldownPercentRemaining(real percentage)
		real amount=Q.getCooldownRemaining()*percentage
		Q.reduceCooldown(amount)
		amount=W.getCooldownRemaining()*percentage
		W.reduceCooldown(amount)
		amount=E.getCooldownRemaining()*percentage
		E.reduceCooldown(amount)
		amount=R.getCooldownRemaining()*percentage
		R.reduceCooldown(amount)

	
class HeroAbility
	ability abil
	int ABIL_ID
	PlayerHero hero		
	real cooldown
	int manacost
	real damage
	real duration
	real range
	string tooltip
	string tooltipAdvanced
	// something missing?
	// ------------------------ //

	construct(PlayerHero h, ability a)
		this.hero=h
		this.abil=a
		this.ABIL_ID='TEST'

	function getAbility() returns ability
		return this.abil
	
	// reduces the cooldown of a given ability based on a flat amount
	function reduceCooldown(real amount)
		real actual=BlzGetUnitAbilityCooldown(hero.getHero(), ABIL_ID, 1)-amount
		BlzSetUnitAbilityCooldown(hero.getHero(),ABIL_ID,1,actual)
		
	// ------------------------------------------
	// Returns the maximum cooldown of a given ability
	function getCooldownMax() returns real
		real cooldown=BlzGetUnitAbilityCooldown(hero.getHero(), ABIL_ID, GetUnitAbilityLevel(hero.getHero(),ABIL_ID))
		return cooldown
			
	// Returns the remaining cooldown of a given ability
	function getCooldownRemaining() returns real
		real cooldown=BlzGetUnitAbilityCooldownRemaining(hero.getHero(), ABIL_ID)
		return cooldown