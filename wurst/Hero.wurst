package Hero
import LinkedList
import ChannelAbilityPreset
import Icons
import EventHelper





let PLAYER_HEROES = new LinkedList<PlayerHero>

public abstract class PlayerHero
	// Unit
	unit hero

	// Abilities
	HeroAbility P
	HeroAbility Q
	HeroAbility W
	HeroAbility E
	HeroAbility R

	// Stats
	real hitPoints 					// hit point maximum
	real hitPointsReg 				// hit point regeneration per second
	real mana 						// mana maximum
	real manaReg 					// mana regeneration per second
	real critChance 				// chance to crit
	real critDamage 				// increased crit damage, standard is 200%
	int armor 						// hero armor
	int damage 						// flat hero damage
	real tenacity 					// Status resistance
	real blessing 					// buff duration multiplier
	real cooldownReductionPercent 	// global % CDR
	real cooldownReductionFlat 		// global flat CDR
	real movementspeedBonus 	 	// in %

	// something missing?

	// ------------------------ //
	construct()
	construct(unit u)
		this.hero=u

	construct(unit h, HeroAbility q, HeroAbility w, HeroAbility e, HeroAbility r, HeroAbility p)
		this.hero=h
		this.P=p
		this.Q=q
		this.W=w
		this.E=e
		this.R=r
		UnitAddAbility(this.hero, P.getAbilityId())
		UnitAddAbility(this.hero, Q.getAbilityId())
		UnitAddAbility(this.hero, W.getAbilityId())
		UnitAddAbility(this.hero, E.getAbilityId())
		UnitAddAbility(this.hero, R.getAbilityId())

	function getHero() returns unit
		return this.hero
	
	// Reduces the cooldown of each ability based on a flat amount
	function reduceGlobalCooldownFlatRemaining(real amount)
		Q.reduceCooldown(amount, hero)
		W.reduceCooldown(amount, hero)
		E.reduceCooldown(amount, hero)
		R.reduceCooldown(amount, hero)

	// Reduces the cooldown of each ability based on the maximum cooldown and a given percentage
	function reduceGlobalCooldownPercentMax(real percentage)
		real amount
		amount=Q.getCooldownMax(hero)*percentage
		Q.reduceCooldown(amount, hero)
		amount=W.getCooldownMax(hero)*percentage
		W.reduceCooldown(amount, hero)
		amount=E.getCooldownMax(hero)*percentage
		E.reduceCooldown(amount, hero)
		amount=R.getCooldownMax(hero)*percentage
		R.reduceCooldown(amount, hero)

	// Reduces the cooldown of each ability based on the remaining cooldown and a given percentage
	function reduceGlobalCooldownPercentRemaining(real percentage)
		real amount=Q.getCooldownRemaining(hero)*percentage
		Q.reduceCooldown(amount, hero)
		amount=W.getCooldownRemaining(hero)*percentage
		W.reduceCooldown(amount, hero)
		amount=E.getCooldownRemaining(hero)*percentage
		E.reduceCooldown(amount, hero)
		amount=R.getCooldownRemaining(hero)*percentage
		R.reduceCooldown(amount, hero)

	
abstract class HeroAbility
	int ABIL_ID				// ability ID
	real cooldown			// maximum cooldown
	int manacost			// maximum mana cost
	real damage				// damage amount
	real duration			// optional duration for buffs, debuffs etc.
	real range				// optional range for smart cast stuff
	string tooltip			// name tooltip, e.g.: Fireball [Q]
	string tooltipAdvanced 	// actual description of the ability

	// something missing?
	// ------------------------ //

	construct(int i)
		this.ABIL_ID=i

	function getAbilityId() returns int
		return this.ABIL_ID
	
	// reduces the cooldown of a given ability based on a flat amount
	function reduceCooldown(real amount, unit u)
		real actual=BlzGetUnitAbilityCooldownRemaining(u, ABIL_ID)-amount
		BlzSetUnitAbilityCooldown(u,ABIL_ID,1,actual)
		
	// ------------------------------------------

	// Returns the maximum cooldown of a given ability
	function getCooldownMax(unit u) returns real
		real cooldown=BlzGetUnitAbilityCooldown(u, ABIL_ID, GetUnitAbilityLevel(u,ABIL_ID))
		return cooldown
			
	// Returns the remaining cooldown of a given ability
	function getCooldownRemaining(unit u) returns real
		real cooldown=BlzGetUnitAbilityCooldownRemaining(u, ABIL_ID)
		return cooldown

public let idLeoQ=compiletime(ABIL_ID_GEN.next())
@compiletime function createAbilityLeoQ()
	new ChannelAbilityPreset(idLeoQ, 1,true)
		..presetTargetTypes(Targettype.NONE)
		..presetTooltipNormal(lvl -> "Wrathful Smite")
		..presetTooltipNormalExtended(lvl -> "Enhances the next basic attack, dealing additional damage.")
		..presetCooldown(lvl -> 10)
		..setManaCost(1,50)
		..setLevels(1)
		..setHotkeyNormal("Q")
		..presetButtonPosNormal(0, 2)
		..presetIcon(Icons.bTNDivineShieldOff)

public let idLeoW=compiletime(ABIL_ID_GEN.next())
@compiletime function createAbilityLeoW()
	new ChannelAbilityPreset(idLeoW, 1,true)
		..presetTargetTypes(Targettype.UNIT)
		..presetTooltipNormal(lvl -> "Fio's Distraction")
		..presetTooltipNormalExtended(lvl -> "Fio distracts the target, weakening it for a few seconds")
		..presetCooldown(lvl -> 10)
		..setManaCost(1,50)
		..setLevels(1)
		..presetCastRange(lvl -> 600)
		..setHotkeyNormal("W")
		..presetButtonPosNormal(1, 2)
		..presetIcon(Icons.bTNFaerieFire)

public let idLeoE=compiletime(ABIL_ID_GEN.next())
@compiletime function createAbilityLeoE()
	new ChannelAbilityPreset(idLeoE, 1,true)
		..presetTargetTypes(Targettype.NONE)
		..presetTooltipNormal(lvl -> "Vengeful Shield")
		..presetTooltipNormalExtended(lvl -> "Shields Leonara and might heal her")
		..presetCooldown(lvl -> 10)
		..setManaCost(1,50)
		..setLevels(1)
		..setHotkeyNormal("E")
		..presetButtonPosNormal(2, 2)
		..presetIcon(Icons.bTNAbsorbMagic)

public let idLeoR=compiletime(ABIL_ID_GEN.next())
@compiletime function createAbilityLeoR()
	new ChannelAbilityPreset(idLeoR, 1,true)
		..presetTargetTypes(Targettype.UNIT)
		..presetTooltipNormal(lvl -> "Pact of Enmity")
		..presetTooltipNormalExtended(lvl -> "Target enemy becomes the archenemy")
		..presetCooldown(lvl -> 10)
		..setManaCost(1,50)
		..setLevels(1)
		..presetCastRange(lvl -> 600)
		..setHotkeyNormal("R")
		..presetButtonPosNormal(3, 2)
		..presetIcon(Icons.bTNImmolationOn)
		
public let idLeoP=compiletime(ABIL_ID_GEN.next())
@compiletime function createAbilityLeoP()
	new ChannelAbilityPreset(idLeoP, 1,true)
		..presetTargetTypes(Targettype.PASSIVE)
		..presetTooltipNormal(lvl -> "Pact of Wrath")
		..presetTooltipNormalExtended(lvl -> "Gets stacks of wrath")
		..presetCooldown(lvl -> 0)
		..setManaCost(1,0)
		..setLevels(1)
		..presetCastRange(lvl -> 0)
		..setHotkeyNormal("")
		..presetButtonPosNormal(1, 1)
		..presetIcon(Icons.bTNAnkh)

init
	trigger tmp=CreateTrigger()
	TriggerRegisterPlayerChatEvent(tmp, Player(0), "hi", false)
	tmp.addAction(function setupUnit)

function setupUnit()
	print("Test")



		