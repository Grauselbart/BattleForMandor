package Shield
import LinkedList

LinkedList<Shield> shields = new LinkedList<Shield>

public class Shield
    unit u
    real duration
    real currentAmount
    real maxAmount
    effect e
    timer t

    construct(unit u, real amount, real duration, string fx, string fxAttach )
        this.u=u
        this.duration=duration
        this.maxAmount=amount
        this.currentAmount=amount
        this.e=this.u.addEffect(fx, fxAttach)
        this.t=CreateTimer()
        //set max hp
        real actual=GetUnitState(this.u, UNIT_STATE_MAX_LIFE)
        this.u.setMaxHP(actual.toInt() + this.maxAmount.toInt())

        //set actual hp
        actual=GetUnitState(this.u, UNIT_STATE_LIFE)
        this.u.setHP(actual+this.maxAmount)

        //Add to shields
        shields.add(this)

        TimerStart(this.t, this.duration, false, function onEnd)

    ondestroy
        this.e.destr()
        this.t.destr()
        //set actual hp
        real actual=GetUnitState(u, UNIT_STATE_LIFE)
        this.u.setHP(actual - this.currentAmount)
        //set max hp
        actual=GetUnitState(u, UNIT_STATE_MAX_LIFE)
        this.u.setMaxHP(actual.toInt() - this.maxAmount.toInt())

        shields.remove(this)

    function getUnit() returns unit
        return this.u

    function getCurrentAmount() returns real
        return this.currentAmount

    function getTimer() returns timer
        return this.t
    
    function reduceCurrentAmount(real dmg)
        this.currentAmount-=dmg


function onEnd()
    timer check=GetExpiredTimer()
    LLIterator<Shield> i=shields.iterator()
    Shield current
    while i.hasNext()
        current=i.next()
        if current.getTimer()==check
            destroy current
            break
        





function unitInList(unit uT) returns Shield
    Shield check=null
    LLIterator<Shield> i=shields.iterator()
    while i.hasNext()
        check=i.next()
        if check.getUnit()==uT
            break
        else
            check=null
    return check

public function checkShield(unit uT, real dmgEnd)
    // check if instances of shields exist
    if shields.isEmpty()==false
        //check if the damaged unit has a shield; 'is part of a shield instance'
        Shield check=unitInList(uT) //getting the longest already active shield on the unit, if any, due to the list iteration.
        if check!=null  
            real dmg=dmgEnd
            // if the damage is lower or equal to the amount of the shield, reduce it by that amount
            if check.getCurrentAmount()>=dmg
                check.reduceCurrentAmount(dmg)
            //  destroy the shield, reduce the damage and search for another shield instance with that unit and repeat this function 
            //  until there is no shield left for this unit or until all damage is absorbed.
            else
                dmg-=check.getCurrentAmount()
                destroy check
                checkShield(uT,dmg)


        



